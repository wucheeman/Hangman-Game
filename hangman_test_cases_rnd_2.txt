HANGMAN TEST CASES
==================
x = passed
e = functionality provided by an enhanced feature
d = deferred

Requirements
============
[x] Use key events to listen for the letters that your players will type.
[x] Display the following on the page:
    e Press any key to get started! 
    x Wins: (# of times user guessed the word correctly).
    x If the word is `madonna`, display it like this when the game starts: `_ _ _ _ _ _ _`.
    x As the user guesses the correct letters, reveal them: `m a d o _  _ a`.
    x Number of Guesses Remaining: (# of guesses remaining for the user).
    e Letters Already Guessed: (Letters the user has guessed, displayed like `L Z Y H`).
[e] After the user wins/loses the game should automatically choose another word and make the user play it.

Display
=======
[x] Initial display has all info shown correctly
[x] Display updates correctly as game completes
[x] In words with multiple of same letter, updates correctly
[x] Display is correct when game is won
[x] Display is correct when game is lost
[x] Display is correct when play continues from one game to the next
[x] Display is correct when play ceases and the browser is restarted

Code logic
==========
[x] Recognizes when a 'good' letter has been guessed and behaves correctly
[x] Recognizes when a 'bad' letter has been guessed and behaves correctly
[x] Handles when same letter in word more than once
[x] Stops individual round when player wins or loses

Cleanup
=======
[x] HTML validates
[x] CSS validates
[d] JS delinted (stretch)
[] worthless comments or todos deleted

Hangman Game Bonuses
====================
[x] Play a sound or song when the user guesses their word correctly, like in our demo.
[x] Write some stylish CSS rules to make a design that fits your game's theme.
[d]**HARD MODE:** Organize your game code as an object, except for the key events to get the letter guessed. This will be a challenge if you haven't coded with JavaScript before, but we encourage anyone already familiar with the language to try this out.
   _ Save your whole game and its properties in an object.
   _ Save any of your game's functions as methods, and call them underneath your object declaration using event listeners.
   _ Don't forget to place your global variables and functions above your object.